#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('react-backend:server');
var http = require('http');

// var localtunnel = require('localtunnel');
// const serverOpts = {subdomain: "serversubtest"};
// const socketOpts = {subdomain: "socketsubtest"};
// const clientOpts = {subdomain: "clientsubtest"};

// var serverTunnel = localtunnel(3008, serverOpts, function(err, tunnel) {
//     if (err){
//       console.log("server localtunnel error: " + err);
//     }else{
//     console.log("server localtunnel url: " + tunnel.url);
//     }
// });

// var clientTunnel = localtunnel(3000, clientOpts, function(err, tunnel) {
//   if (err){
//     console.log("client localtunnel error: " + err);
//   }else{
//   console.log("client localtunnel url: " + tunnel.url);
//   }
// });

// var socketTunnel = localtunnel(8001, socketOpts, function(err, tunnel) {
//   if (err){
//     console.log("socket localtunnel error: " + err);
//   }else{
//   console.log("socket localtunnel url: " + tunnel.url);
//   }
// });

// serverTunnel.on('close', function() {
//     console.log("server localtunnel closed");
// });
// clientTunnel.on('close', function() {
//   console.log("client localtunnel closed");
// });
// socketTunnel.on('close', function() {
//   console.log("socket localtunnel closed");
// });

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort('3008');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    case 'ECONNRESET':
      console.error('connection reset');
      // process.exit(1);
      break;  
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
